.. AdminKit documentation master file, created by
   sphinx-quickstart on Wed Jul  7 10:17:49 2010.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to AdminKit's documentation!
====================================

Contents:

.. toctree::
   :maxdepth: 2

Philosophy
==========

AdminKit is a tool to manage systems' configuration. It automates
system administration tasks. All the configuration descriptions is
stored in a central directory tree. This tree is copied on all the
systems by a mean that is outside AdminKit. For example, we use git to
manage the versionning and distribution of the files.

Configuration
=============

Directory structure
-------------------

The files are usually stored under ``/var/lib/adminkit``.

The main file is ``adminkit.conf``. It describes the roles for each
managed system. It must be at the root of ``/var/lib/adminkit``.

The roles are described in the ``roles`` sub-directory. The roles
describe the needed config files and services.

The config files are under the ``files`` sub-directory. You can
specialized the config file by adding the name of the system or any
roles or domain.

Roles
-----

Roles can use the following directives:

- ``add_files(<file desc>, <file desc> ...)`` add files from the
  repository to be copied in the system for this role. A ``file
  desc`` can be a path, a list with a path and a permission.

- ``files_for_service(<service>, <file1>, <file2>...)`` defines files
  that are added like the ``add_files directive`` but in addition, the
  service is reloaded if any of the files are copied.

- ``check_service_by_pidfile(<service>)`` checks if the service is
  still running else restart it for this role.

- ``check_perms((<file>, <perm>), ...)`` enforces permissions of files
  for this role.

In fact role files are python files so you can use any python
construct you want.

Config files
------------

The config files are in fact templates containing variables. Some
variables are automatically defined:

``hostname``
  fully qualified host name.

``domainname``
  domain name.

``shortname``
  host name without domain.

``osname``
  operating system name (i.e. debian).

``sysname``
  operating system type (i.e. linux).

``oscode``
  operating system code name (i.e. debian-lenny).

You can also define variables in the main config file or in the role
files using the add_var definitions.

Variables are used in the config files using the @ prefix (for example
``@hostname`` or ``@{hostname}``).

Example
-------

Imagine we want to manage a system called host1 under AdminKit. So on
the disk, we have the following directory structure: ::

  /var/lib/adminkit/adminkit.conf
  /var/lib/adminkit/roles/base
  /var/lib/adminkit/files/etc/cron.hourly/base
  /var/lib/adminkit/files/etc/mailname

The ``base`` role defines that a system is under AdminKit control and
so it has a crontab entry that run the adminkit command every hour and
be sure that the mailname file is always coherent with the host name.

Here is the ``adminkit.conf`` file with the assumption that the fqdn
of host1 is host1.domain.com: ::

  define_domain('domain.com')
  add_roles('host1', 'base')

Then the ``base`` role defines what files are defined for the role: ::

  add_files(('/etc/cron.hourly/base', 0755),
             '/etc/mailname')

The file ``/var/lib/adminkit/files/etc/mailname`` will be copied to
/etc/mailname if there is a difference with the local copy. This file
is interesting as we use a variable that will be expanded during the
copy phase: ::

  @hostname
